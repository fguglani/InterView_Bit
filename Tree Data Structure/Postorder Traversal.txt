/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    public ArrayList<Integer> postorderTraversal(TreeNode root) 
    {
        //For postorder we think like how to add elements in opposite fashion
        //We put ourselves first then the right and the left
        
        ArrayList<Integer> ans=new ArrayList<>();
        Stack<TreeNode> s1=new Stack();
        Stack<TreeNode> s2=new Stack();
        s1.push(root);
        while(!s1.isEmpty())
        {
            root=s1.pop();
            s2.push(root);
            if(root.left!=null)
            {
                s1.push(root.left);
            }
            if(root.right!=null)
            {
                s1.push(root.right);
            }
        }
        while(!s2.isEmpty())
        {
            ans.add(s2.pop().val);
        }
        
        return ans;
    }
}
